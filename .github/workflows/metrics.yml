name: Generate and Publish Metrics

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Environment
        run: |
          sudo apt-get update
          sudo apt-get install jq
          sudo apt-get install git
          git config --global --add safe.directory /github/workspace

      - name: Run Metrics Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          #!/bin/bash

          # Function to fetch data with pagination support
          function fetch_with_pagination() {
              local url=$1
              local page=1
              local results=()
              local temp_file=$(mktemp)
              while : ; do
                  response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "${url}&page=${page}")
                  echo "${response}" > "$temp_file"
                  if jq -e '. | length == 0' "$temp_file" >/dev/null; then
                      break
                  fi
                  results+=("${response}")
                  ((page++))
              done
              rm "$temp_file"
              echo "${results[@]}"
          }

          # Fetch all branches
          branches_json=$(fetch_with_pagination "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/branches")
          branches=$(echo "$branches_json" | jq -r '.[] | .name')

          # Fetch all contributors
          contributors_json=$(fetch_with_pagination "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contributors")
          contributors=$(echo "$contributors_json" | jq -r '.[] | .login')

          # Initialize associative arrays for storing metrics
          declare -A total_commits total_loc total_issues total_comments

          # Loop through each contributor
          for contributor in $contributors; do
              # Aggregate commits across all branches
              for branch in $branches; do
                  commits=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                      "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/commits?sha=$branch&author=$contributor" | jq length)
                  total_commits[$contributor]=$((${total_commits[$contributor]:-0} + commits))
              done

              # Aggregate LOC (lines of code)
              # Note: This part is highly dependent on your repository and might need adjustments.
              loc=$(git log --author="$contributor" --pretty=tformat: --numstat \
                    | awk '{added+=$1; deleted+=$2} END {print added, deleted}')
              total_loc[$contributor]=$loc

              # Aggregate issues and comments (not branch-specific)
              issues=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/search/issues?q=repo:$REPO_OWNER/$REPO_NAME+type:issue+assignee:$contributor" \
                  | jq '.total_count')
              total_issues[$contributor]=$issues

              comments=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/search/issues?q=repo:$REPO_OWNER/$REPO_NAME+type:pr+comments:>=1+involves:$contributor" \
                  | jq '.items | .[] | .comments_url' | xargs -I {} curl -s -H "Authorization: token $GITHUB_TOKEN" {} | jq -s length)
              total_comments[$contributor]=$comments
          done

          # Generate HTML
          echo "<html><body><h1>Repository Metrics</h1><pre>" > metrics.html
          for contributor in "${!total_commits[@]}"; do
              commits=${total_commits[$contributor]}
              loc=${total_loc[$contributor]}
              issues=${total_issues[$contributor]}
              comments=${total_comments[$contributor]}
              echo "$contributor: Commits: $commits, LOC: $loc, Issues: $issues, Comments: $comments<br>" >> metrics.html
          done
          echo "</pre></body></html>" >> metrics.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .  # Deploy the current directory
          publish_branch: gh-pages  # The branch to deploy to (GitHub Pages)
